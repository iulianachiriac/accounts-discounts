export default [
  {
    title: "Home",
    fileName: "index.html",
    text: "Home"
  },
  {
    title: "AccountTriggerTest",
    fileName: "AccountTriggerTest.html",
    text: "AccountTriggerTest Signature @isTest public class AccountTriggerTest AccountTriggerTest Properties Name Signature NUM_OF_CHILDREN_ACCOUNTS private static final Integer NUM_OF_CHILDREN_ACCOUNTS NUM_OF_TOP_LEVEL_ACCOUNTS private static final Integer NUM_OF_TOP_LEVEL_ACCOUNTS PARENT_DISCOUNT private static final Decimal PARENT_DISCOUNT AccountTriggerTest Methods itShouldChangeCurrentParentOfAccounts() itShouldCreateChildrenAccounts(topLevelAccounts, hasLockedDiscount) This method creates 4 levels of accounts' nesting(each one with their children accounts, except the last one) itShouldUpdateDiscountOnChildrenWhenDeletingAndUndeletingParents() itShouldUpdateDiscountOnLockedChildrenToZeroIfParentDiscountChanges() itShouldUpdateDiscountOnUnlockedChildrenIfParentDiscountChanges() makeData() itShouldChangeCurrentParentOfAccounts() Signature @isTest private static void itShouldChangeCurrentParentOfAccounts() itShouldCreateChildrenAccounts(topLevelAccounts, hasLockedDiscount) This method creates 4 levels of accounts' nesting(each one with their children accounts, except the last one) Signature private static List<Account> itShouldCreateChildrenAccounts(    List<Account> topLevelAccounts,    Boolean hasLockedDiscount  ) Parameters topLevelAccounts Type:     List<Account> hasLockedDiscount Type:    Boolean Returns List<Account> itShouldUpdateDiscountOnChildrenWhenDeletingAndUndeletingParents() Signature @isTest private static void itShouldUpdateDiscountOnChildrenWhenDeletingAndUndeletingParents() itShouldUpdateDiscountOnLockedChildrenToZeroIfParentDiscountChanges() Signature @isTest private static void itShouldUpdateDiscountOnLockedChildrenToZeroIfParentDiscountChanges() itShouldUpdateDiscountOnUnlockedChildrenIfParentDiscountChanges() Signature @isTest private static void itShouldUpdateDiscountOnUnlockedChildrenIfParentDiscountChanges() makeData() Signature @TestSetup static void makeData()"
  },
  {
    title: "TriggerHandler",
    fileName: "TriggerHandler.html",
    text: "TriggerHandler Signature public virtual class TriggerHandler TriggerHandler Properties Name Signature Annotations bypassedHandlers private static Set<String> bypassedHandlers context private TriggerContext context @TestVisible isTriggerExecuting private Boolean isTriggerExecuting @TestVisible loopCountMap private static Map<String, LoopCount> loopCountMap Enums Name Signature Values TriggerContext private enum TriggerContext BEFORE_INSERT, BEFORE_UPDATE, BEFORE_DELETE, AFTER_INSERT, AFTER_UPDATE, AFTER_DELETE, AFTER_UNDELETE TriggerHandler Constructors TriggerHandler() TriggerHandler() Signature public TriggerHandler() TriggerHandler Methods addToLoopCount() afterDelete() afterInsert() afterUndelete() afterUpdate() beforeDelete() beforeInsert() context methods beforeUpdate() bypass(handlerName) public static methods clearAllBypasses() clearBypass(handlerName) clearMaxLoopCount() getHandlerName() isBypassed(handlerName) run() public instance methods setMaxLoopCount(max) setTriggerContext() private instancemethods setTriggerContext(ctx, testMode) validateRun() addToLoopCount() Signature @TestVisible private void addToLoopCount() afterDelete() Signature @TestVisible protected virtual void afterDelete() afterInsert() Signature @TestVisible protected virtual void afterInsert() afterUndelete() Signature @TestVisible protected virtual void afterUndelete() afterUpdate() Signature @TestVisible protected virtual void afterUpdate() beforeDelete() Signature @TestVisible protected virtual void beforeDelete() beforeInsert() context methods Signature @TestVisible protected virtual void beforeInsert() beforeUpdate() Signature @TestVisible protected virtual void beforeUpdate() bypass(handlerName) public static methods Signature public static void bypass(String handlerName) clearAllBypasses() Signature public static void clearAllBypasses() clearBypass(handlerName) Signature public static void clearBypass(String handlerName) clearMaxLoopCount() Signature public void clearMaxLoopCount() getHandlerName() Signature @TestVisible private String getHandlerName() isBypassed(handlerName) Signature public static Boolean isBypassed(String handlerName) run() public instance methods Signature public void run() setMaxLoopCount(max) Signature public void setMaxLoopCount(Integer max) setTriggerContext() private instancemethods Signature @TestVisible private void setTriggerContext() setTriggerContext(ctx, testMode) Signature @TestVisible private void setTriggerContext(String ctx, Boolean testMode) validateRun() Signature @TestVisible private Boolean validateRun() TriggerHandler.LoopCount inner classes Signature @TestVisible private class LoopCount TriggerHandler.LoopCount Properties Name Signature count private Integer count max private Integer max TriggerHandler.LoopCount Constructors LoopCount() LoopCount(max) LoopCount() Signature public LoopCount() LoopCount(max) Signature public LoopCount(Integer max) TriggerHandler.LoopCount Methods exceeded() getCount() getMax() increment() setMax(max) exceeded() Signature public Boolean exceeded() getCount() Signature public Integer getCount() getMax() Signature public Integer getMax() increment() Signature public Boolean increment() setMax(max) Signature public void setMax(Integer max) TriggerHandler.TriggerHandlerException Signature public class TriggerHandlerException extends Exception"
  },
  {
    title: "TriggerHandler_Test",
    fileName: "TriggerHandler_Test.html",
    text: "TriggerHandler_Test Signature @isTest private class TriggerHandler_Test TriggerHandler_Test Properties Name Signature handler private static TriggerHandler_Test.TestHandler handler lastMethodCalled private static String lastMethodCalled TRIGGER_CONTEXT_ERROR private static final String TRIGGER_CONTEXT_ERROR TriggerHandler_Test Methods afterDeleteMode() afterInsertMode() afterUndeleteMode() afterUpdateMode() beforeDeleteMode() beforeInsertMode() beforeUpdateMode() resetTest() testing utilities testAfterDelete() testAfterInsert() testAfterUndelete() testAfterUpdate() testBeforeDelete() testBeforeInsert() unit tests testBeforeUpdate() testBypassAPI() testGetHandlerName() testLoopCount() testLoopCountClass() testNonTriggerContext() testVirtualMethods() afterDeleteMode() Signature private static void afterDeleteMode() afterInsertMode() Signature private static void afterInsertMode() afterUndeleteMode() Signature private static void afterUndeleteMode() afterUpdateMode() Signature private static void afterUpdateMode() beforeDeleteMode() Signature private static void beforeDeleteMode() beforeInsertMode() Signature private static void beforeInsertMode() beforeUpdateMode() Signature private static void beforeUpdateMode() resetTest() testing utilities Signature private static void resetTest() testAfterDelete() Signature @isTest static void testAfterDelete() testAfterInsert() Signature @isTest static void testAfterInsert() testAfterUndelete() Signature @isTest static void testAfterUndelete() testAfterUpdate() Signature @isTest static void testAfterUpdate() testBeforeDelete() Signature @isTest static void testBeforeDelete() testBeforeInsert() unit tests Signature @isTest static void testBeforeInsert() testBeforeUpdate() Signature @isTest static void testBeforeUpdate() testBypassAPI() Signature @isTest static void testBypassAPI() testGetHandlerName() Signature @isTest static void testGetHandlerName() testLoopCount() Signature @isTest static void testLoopCount() testLoopCountClass() Signature @isTest static void testLoopCountClass() testNonTriggerContext() Signature @isTest static void testNonTriggerContext() testVirtualMethods() Signature @isTest static void testVirtualMethods() TriggerHandler_Test.TestHandler Signature private class TestHandler extends TriggerHandler TriggerHandler_Test.TestHandler Methods afterDelete() afterInsert() afterUndelete() afterUpdate() beforeDelete() beforeInsert() beforeUpdate() afterDelete() Signature public override void afterDelete() afterInsert() Signature public override void afterInsert() afterUndelete() Signature public override void afterUndelete() afterUpdate() Signature public override void afterUpdate() beforeDelete() Signature public override void beforeDelete() beforeInsert() Signature public override void beforeInsert() beforeUpdate() Signature public override void  beforeUpdate()"
  }
];
